"use strict";

var _unchainedBitcoin = require("unchained-bitcoin");

var _fixtures = require("../test/fixtures");

var _purpose = require("./purpose");

var _derivation = require("./derivation");

describe("addressFromExtPubKey() with invalid xpubs", function () {
  test("address generation from invalid xpub fails", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: ""
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: "xpub123"
    })).toBeFalsy();
  });
  test("address generation with invalid parameters fails", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      accountNumber: -1
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      purpose: "99"
    })).toBeFalsy();
  });
});
describe("addressFromExtPubKey(MAINNET)", function () {
  // BIP 44
  test("P2PKH address generation from xpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.XPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.LEGACY);
  });
  test("P2PKH address generation from ypub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.YPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.LEGACY);
  });
  test("P2PKH address generation from zpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.ZPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.LEGACY);
  }); // BIP 49

  test("P2SH address generation from xpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.XPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.SEGWIT);
  });
  test("P2SH address generation from ypub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.YPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.SEGWIT);
  });
  test("P2SH address generation from zpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.ZPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.SEGWIT);
  }); // BIP 84

  test("P2WPKH address generation from xpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.XPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.BECH32);
  });
  test("P2WPKH address generation from ypub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.YPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.BECH32);
  });
  test("P2WPKH address generation from zpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.ZPUB,
      accountNumber: 0,
      keyIndex: 0,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).address).toBe(_fixtures.KEY.MAIN.BECH32);
  });
});
describe("addressFromExtPubKey(TESTNET)", function () {
  // BIP 44
  test("P2PKH address generation from tpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.LEGACY);
  });
  test("P2PKH address generation from upub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.UPUB,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.LEGACY);
  });
  test("P2PKH address generation from vpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.VPUB,
      purpose: _purpose.Purpose.P2PKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.LEGACY);
  }); // BIP 49

  test("P2SH address generation from tpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.SEGWIT);
  });
  test("P2SH address generation from upub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.UPUB,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.SEGWIT);
  });
  test("P2SH address generation from vpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.VPUB,
      purpose: _purpose.Purpose.P2SH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.SEGWIT);
  }); // BIP 84

  test("P2WPKH address generation from tpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.BECH32);
  });
  test("P2WPKH address generation from upub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.UPUB,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.BECH32);
  });
  test("P2WPKH address generation from vpub", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.VPUB,
      purpose: _purpose.Purpose.P2WPKH,
      network: _unchainedBitcoin.NETWORKS.TESTNET
    }).address).toBe(_fixtures.KEY.TEST.BECH32);
  });
});
describe("addressFromExtPubKey", function () {
  test("default address generation from tpub (default = testnet)", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.TPUB
    }).address).toBe(_fixtures.KEY.TEST.BECH32);
  });
  test("default address generation from xpub on mainnet", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEY.MAIN.XPUB,
      network: _unchainedBitcoin.NETWORKS.MAINNET // or "mainnet"

    }).address).toBe(_fixtures.KEY.MAIN.BECH32);
  });
  test("forbid testnet address generation from mainnet key", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.MAIN.XPUB[0],
      network: _unchainedBitcoin.NETWORKS.TESTNET
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.MAIN.YPUB[0],
      network: _unchainedBitcoin.NETWORKS.TESTNET
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.MAIN.ZPUB[0],
      network: _unchainedBitcoin.NETWORKS.TESTNET
    })).toBeFalsy();
  });
  test("forbid mainnet address generation from testnet key", function () {
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.TEST.TPUB[0],
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.TEST.UPUB[0],
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBeFalsy();
    expect((0, _derivation.addressFromExtPubKey)({
      extPubKey: _fixtures.KEYS.TEST.VPUB[0],
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBeFalsy();
  });
});
describe("addressesFromExtPubKey", function () {
  test("default address generation from vpub on testnet", function () {
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.KEY.TEST.VPUB,
      addressCount: 3
    }).length).toEqual(3);
  });
  test("default address generation from xpub on mainnet", function () {
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.WASABI.XPUB,
      addressCount: 3,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).map(function (obj) {
      return obj.address;
    })).toStrictEqual(_fixtures.WASABI.ADDRESSES);
  });
  test("default address generation from ypub on mainnet", function () {
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.WASABI.YPUB,
      addressCount: 3,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).map(function (obj) {
      return obj.address;
    })).toStrictEqual(_fixtures.WASABI.ADDRESSES);
  });
  test("default address generation from zpub on mainnet", function () {
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.WASABI.ZPUB,
      addressCount: 3,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).map(function (obj) {
      return obj.address;
    })).toStrictEqual(_fixtures.WASABI.ADDRESSES);
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.SAMOURAI.ZPUB,
      addressCount: 3,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).map(function (obj) {
      return obj.address;
    })).toStrictEqual(_fixtures.SAMOURAI.ADDRESSES);
    expect((0, _derivation.addressesFromExtPubKey)({
      extPubKey: _fixtures.SAMOURAI.ZPUB,
      addressCount: 20,
      // generate 20 addresses
      network: _unchainedBitcoin.NETWORKS.MAINNET
    }).map(function (obj) {
      return obj.address;
    })[19] // pick nr. 20 and compare
    ).toEqual("bc1qrkv7s6enp5n7nnz97g2em2q4jefcmt9208syg0");
  });
});