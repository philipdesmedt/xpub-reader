"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPurposeFromExtPubKey = getPurposeFromExtPubKey;
exports.getExtPubKeyMetadata = getExtPubKeyMetadata;
exports.getNetworkFromExtPubKey = getNetworkFromExtPubKey;

var _unchainedBitcoin = require("unchained-bitcoin");

var _purpose = require("./purpose");

var _types = require("./types");

/**
 * This module retrieves metadata from extended public keys.
 *
 * @module metadata
 */

/**
 * Get network type from extended public key format.
 * XPUB/YPUB/ZPUB = mainnet,
 * TPUB/UPUB/VPUB = testnet.
 *
 * @param  {string} extPubKey - an extended public key
 *
 * @returns {NETWORK} the associated network. See unchained-bitcoin/networks
 */
function getNetworkFromExtPubKey(extPubKey) {
  var prefix = extPubKey.slice(0, 4);

  switch (prefix) {
    case _types.TYPE.XPUB:
    case _types.TYPE.YPUB:
    case _types.TYPE.ZPUB:
      return _unchainedBitcoin.NETWORKS.MAINNET;

    case _types.TYPE.TPUB:
    case _types.TYPE.UPUB:
    case _types.TYPE.VPUB:
      return _unchainedBitcoin.NETWORKS.TESTNET;

    default:
      return undefined;
  }
}
/**
 * Get purpose from an extended public key, dependent on key type
 * (xpub/ypub/zpub, or tpub/upub/vpub).
 *
 * @param  {string} extPubKey - an extended public key
 *
 * @returns {module:purpose~Purpose} the purpose (address type) of the key
 */


function getPurposeFromExtPubKey(extPubKey) {
  var prefix = extPubKey.slice(0, 4);

  switch (prefix) {
    case _types.TYPE.XPUB:
    case _types.TYPE.TPUB:
      return _purpose.Purpose.P2PKH;

    case _types.TYPE.YPUB:
    case _types.TYPE.UPUB:
      return _purpose.Purpose.P2SH;

    case _types.TYPE.ZPUB:
    case _types.TYPE.VPUB:
      return _purpose.Purpose.P2WPKH;

    default:
      return undefined;
  }
}
/**
 * Extended public key metadata.
 *
 * @typedef {object} metadata
 * @property {module:type~TYPE} type - the extended public key type (xpub/ypub/zpub/tpub/upub/vpub)
 * @property {number} index - the key index
 * @property {number} depth - the depth of the derivation path
 * @property {string} pubkey - the corresponding (non-extended) public key
 * @property {string} chaincode - the chaincode
 * @property {string} parentFingerprint - the fingerprint of the parent key
 * @property {NETWORK} network - the associated network (TESTNET or MAINNET)
 */

/**
 * Retrieves metadata from a given extended public key.
 *
 * @param  {string} extPubKey - an extended public key
 *
 * @returns {Metadata} a {@link module:metadata~metadata} object
 */


function getExtPubKeyMetadata(extPubKey) {
  try {
    var xpubObj = _unchainedBitcoin.ExtendedPublicKey.fromBase58(extPubKey);

    return {
      type: getPurposeFromExtPubKey(extPubKey),
      index: xpubObj.index,
      depth: xpubObj.depth,
      pubkey: xpubObj.pubkey,
      chaincode: xpubObj.chaincode,
      parentFingerprint: xpubObj.parentFingerprint,
      network: getNetworkFromExtPubKey(extPubKey),
      version: xpubObj.version
    };
  } catch (error) {
    return {};
  }
}