"use strict";

var _unchainedBitcoin = require("unchained-bitcoin");

var _fixtures = require("../test/fixtures");

var _metadata = require("./metadata");

describe("getNetworkFromExtPubKey", function () {
  test("xpub/ypub/zpub should be mainnet", function () {
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.MAIN.XPUB)).toBe(_unchainedBitcoin.NETWORKS.MAINNET);
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.MAIN.YPUB)).toBe(_unchainedBitcoin.NETWORKS.MAINNET);
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.MAIN.ZPUB)).toBe(_unchainedBitcoin.NETWORKS.MAINNET);
  });
  test("tpu/upub/vpub should be mainnet", function () {
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.TEST.TPUB)).toBe(_unchainedBitcoin.NETWORKS.TESTNET);
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.TEST.UPUB)).toBe(_unchainedBitcoin.NETWORKS.TESTNET);
    expect((0, _metadata.getNetworkFromExtPubKey)(_fixtures.KEY.TEST.VPUB)).toBe(_unchainedBitcoin.NETWORKS.TESTNET);
  });
  test("invalid key should be undefined", function () {
    expect((0, _metadata.getNetworkFromExtPubKey)("abc")).toBeFalsy();
  });
});
describe("getPurposeFromExtPubKey", function () {
  test("xpub/tpub should be of type P2PKH (BIP 44)", function () {
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.MAIN.XPUB)).toBe("44");
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.TEST.TPUB)).toBe("44");
  });
  test("ypub/upub should be of type P2SH (BIP 49)", function () {
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.MAIN.YPUB)).toBe("49");
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.TEST.UPUB)).toBe("49");
  });
  test("zpub/vpub should be of type P2WPKH (BIP 84)", function () {
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.MAIN.ZPUB)).toBe("84");
    expect((0, _metadata.getPurposeFromExtPubKey)(_fixtures.KEY.TEST.VPUB)).toBe("84");
  });
});
describe("getExtPubKeyMetadata", function () {
  test("xpub metadata", function () {
    expect((0, _metadata.getExtPubKeyMetadata)(_fixtures.KEY.MAIN.XPUB)).toStrictEqual({
      chaincode: "2d6929b63bd13b5f21af8470535baf7ca10924cf21c88fd96f735d65cd0a6cfc",
      depth: 4,
      index: 0,
      network: "mainnet",
      parentFingerprint: 3131820507,
      pubkey: "02dd9d5ff10088b43146268c361911d10bb730904bf3a5291402d63c04f66ed2a2",
      type: "44",
      version: "0488b21e"
    });
    expect((0, _metadata.getExtPubKeyMetadata)(_fixtures.KEY.MAIN.YPUB)).toStrictEqual({
      chaincode: "2d6929b63bd13b5f21af8470535baf7ca10924cf21c88fd96f735d65cd0a6cfc",
      depth: 4,
      index: 0,
      network: "mainnet",
      parentFingerprint: 3131820507,
      pubkey: "02dd9d5ff10088b43146268c361911d10bb730904bf3a5291402d63c04f66ed2a2",
      type: "49",
      version: "049d7cb2"
    });
    expect((0, _metadata.getExtPubKeyMetadata)(_fixtures.KEY.MAIN.ZPUB)).toStrictEqual({
      chaincode: "2d6929b63bd13b5f21af8470535baf7ca10924cf21c88fd96f735d65cd0a6cfc",
      depth: 4,
      index: 0,
      network: "mainnet",
      parentFingerprint: 3131820507,
      pubkey: "02dd9d5ff10088b43146268c361911d10bb730904bf3a5291402d63c04f66ed2a2",
      type: "84",
      version: "04b24746"
    });
  });
});