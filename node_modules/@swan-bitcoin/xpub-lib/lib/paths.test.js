"use strict";

var _unchainedBitcoin = require("unchained-bitcoin");

var _paths = require("./paths");

var _purpose = require("./purpose");

describe("humanReadableDerivationPath", function () {
  test("Legacy", function () {
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/44'/0'/0'/0/1"
    })).toBe("Account #1 (Legacy)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/44'/0'/1'/0/1"
    })).toBe("Account #2 (Legacy)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/44'/0'/2'/0/1"
    })).toBe("Account #3 (Legacy)");
  });
  test("SegWit", function () {
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/49'/0'/0'/0/1"
    })).toBe("Account #1 (SegWit)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/49'/0'/1'/0/1"
    })).toBe("Account #2 (SegWit)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/49'/0'/2'/0/1"
    })).toBe("Account #3 (SegWit)");
  });
  test("Native SegWit", function () {
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/84'/0'/0'/0/1"
    })).toBe("Account #1 (Native SegWit)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/84'/0'/1'/0/1"
    })).toBe("Account #2 (Native SegWit)");
    expect((0, _paths.humanReadableDerivationPath)({
      bip32Path: "m/84'/0'/2'/0/1"
    })).toBe("Account #3 (Native SegWit)");
  });
  test("empty path", function () {
    expect(function () {
      (0, _paths.humanReadableDerivationPath)({
        bip32Path: ""
      });
    }).toThrow();
  });
});
describe("accountDerivationPath", function () {
  test("testnet derivation paths", function () {
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2PKH,
      accountNumber: 0
    })).toBe("m/44'/1'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2SH,
      accountNumber: 0
    })).toBe("m/49'/1'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2WPKH,
      accountNumber: 0
    })).toBe("m/84'/1'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2PKH,
      accountNumber: 1337
    })).toBe("m/44'/1'/1337'");
  });
  test("mainnet derivation paths", function () {
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2PKH,
      accountNumber: 0,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBe("m/44'/0'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2SH,
      accountNumber: 0,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBe("m/49'/0'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2WPKH,
      accountNumber: 0,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBe("m/84'/0'/0'");
    expect((0, _paths.accountDerivationPath)({
      purpose: _purpose.Purpose.P2WPKH,
      accountNumber: 21,
      network: _unchainedBitcoin.NETWORKS.MAINNET
    })).toBe("m/84'/0'/21'");
  });
});
describe("fullDerivationPath", function () {
  test("full testnet derivation paths", function () {
    expect((0, _paths.fullDerivationPath)({
      purpose: _purpose.Purpose.P2PKH,
      accountNumber: 0,
      keyIndex: 0
    })).toBe("m/44'/1'/0'/0/0");
    expect((0, _paths.fullDerivationPath)({
      purpose: _purpose.Purpose.P2PKH,
      accountNumber: 21,
      keyIndex: 1337
    })).toBe("m/44'/1'/21'/0/1337");
  });
});
describe("partialKeyDerivationPath", function () {
  test("partial key derivation paths", function () {
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 0,
      keyIndex: 0
    })).toBe("0/0");
  });
  test("valid account number", function () {
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 0
    })).toBeTruthy();
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 21
    })).toBeTruthy();
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 1337
    })).toBeTruthy();
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 2147483647
    })).toBeTruthy();
  });
  test("invalid account number", function () {
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: -1
    })).toBeFalsy();
    expect((0, _paths.partialKeyDerivationPath)({
      accountNumber: 2147483648
    })).toBeFalsy();
  });
  test("invalid key index", function () {
    expect((0, _paths.partialKeyDerivationPath)({
      keyIndex: -1
    })).toBeFalsy();
  });
});