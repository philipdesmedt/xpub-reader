"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maskKey = maskKey;
exports.harden = harden;
exports.segment = segment;

var _constants = require("./constants");

/**
 * This module exports various utility functions.
 *
 * @module utils
 */

/**
 * Masks an extended public key by showing only the first and last couple
 * characters.
 *
 * @param  {string} key - the (extended public) key to mask
 * @param  {number} [pre=15] - number of characters to show in the beginning
 * @param  {number} [post=15] - number of characters to show in the end
 * @param  {string} [placeholder="[...]"] - string used for masking
 *
 * @returns {string} the masked address
 */
function maskKey(key) {
  var pre = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;
  var post = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;
  var placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "[...]";
  var beginning = key.substr(0, pre);
  var ending = key.substr(key.length - post, key.length);
  return beginning + placeholder + ending;
}
/**
 * Hardens a path segment as described in BIP32.
 *
 * @param  {string} pathSegment - the path segment to harden
 */


function harden(pathSegment) {
  return pathSegment + _constants.APOSTROPHE;
}
/**
 * Splits a given bitcoin address into three segments for easier readability.
 * Per default, the first and last segment is 6 characters long.
 *
 * @param  {string} address - the given bitcoin address
 * @param  {number} [pre=6] - length of the first segment
 * @param  {number} [post=6] - length of the last segment
 *
 * @returns {string[]} array of address segments
 */


function segment(address) {
  var pre = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
  var post = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;
  var beginning = address.substr(0, pre);
  var middle = address.substr(pre, address.length - (pre + post));
  var end = address.substr(address.length - post, address.length);
  return [beginning, middle, end];
}