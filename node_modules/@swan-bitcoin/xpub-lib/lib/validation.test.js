"use strict";

var _unchainedBitcoin = require("unchained-bitcoin");

var _fixtures = require("../test/fixtures");

var _validation = require("./validation");

describe("isValidIndex", function () {
  test("valid indices", function () {
    expect((0, _validation.isValidIndex)("0")).toBeTruthy();
    expect((0, _validation.isValidIndex)("1")).toBeTruthy();
    expect((0, _validation.isValidIndex)("21")).toBeTruthy();
    expect((0, _validation.isValidIndex)("1337")).toBeTruthy();
    expect((0, _validation.isValidIndex)("2147483647")).toBeTruthy();
    expect((0, _validation.isValidIndex)(0)).toBeTruthy();
    expect((0, _validation.isValidIndex)(1)).toBeTruthy();
    expect((0, _validation.isValidIndex)(21)).toBeTruthy();
    expect((0, _validation.isValidIndex)(1337)).toBeTruthy();
    expect((0, _validation.isValidIndex)(2147483647)).toBeTruthy();
  });
  test("invalid indices", function () {
    expect((0, _validation.isValidIndex)("-1")).toBeFalsy();
    expect((0, _validation.isValidIndex)("2147483648")).toBeFalsy();
    expect((0, _validation.isValidIndex)("a")).toBeFalsy();
    expect((0, _validation.isValidIndex)("/")).toBeFalsy();
    expect((0, _validation.isValidIndex)(-1)).toBeFalsy();
    expect((0, _validation.isValidIndex)(2147483648)).toBeFalsy();
  });
});
describe("isValidPathSegment", function () {
  test("valid path segments", function () {
    // hardened
    expect((0, _validation.isValidPathSegment)("m'")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("0'")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("1'")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("44'")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("49'")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("84'")).toBeTruthy(); // not hardened

    expect((0, _validation.isValidPathSegment)("m")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("0")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("1")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("44")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("49")).toBeTruthy();
    expect((0, _validation.isValidPathSegment)("84")).toBeTruthy();
  });
});
describe("isValidExtPubKey", function () {
  test("invalid keys are invalid on mainnet", function () {
    expect((0, _validation.isValidExtPubKey)("", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("xpub...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("ypub...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("zpub...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("tpub...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("upub...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("vpub...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("ExtPubKey6D7NqpxWckGwCHhpXoL4pH38m5xVty62KY2wUh6JoyDCofwHciDRoQ3xm7WAg2ffpHaC6X4bEociYq81niyNUGhCxEs6fDFAd1LPbEmzcAm", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)("xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUr", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
  });
  test("mainnet keys (extPubKey/ypub/zpub) are invalid on testnet", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.XPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.YPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.ZPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
  });
  test("testnet keys (tpub/upub/vpub) are invalid on mainnet", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.TPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.UPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.VPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
  }); // BIP 32 and BIP 44: XPUB & TPUB

  test("mainnet xpub is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.XPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.XPUB[1], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.XPUB[2], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  });
  test("testnet xpub (tpub) is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.TPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.TPUB[1], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.TPUB[2], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  }); // BIP 49: YPUB & UPUB

  test("mainnet ypub is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.YPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.YPUB[1], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.YPUB[2], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  });
  test("testnet ypub (upub) is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.UPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.UPUB[1], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.UPUB[2], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  }); // BIP 84: ZPUB & VPUB

  test("mainnet zpub is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.ZPUB[0], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.ZPUB[1], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.MAIN.ZPUB[2], _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  });
  test("testnet zpub (vpub) is valid", function () {
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.VPUB[0], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.VPUB[1], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
    expect((0, _validation.isValidExtPubKey)(_fixtures.KEYS.TEST.VPUB[2], _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  });
});
describe("isValidAddress", function () {
  // MAINNET
  test("valid legacy (P2PKH) address on mainnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.LEGACY, _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  });
  test("valid segwit (P2SH) address on mainnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.SEGWIT, _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  });
  test("valid bech32 (P2WPKH) address on mainnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.BECH32, _unchainedBitcoin.NETWORKS.MAINNET)).toBeTruthy();
  }); // TESTNET

  test("valid legacy (P2PKH) address on testnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.LEGACY, _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  });
  test("valid segwit (P2SH) address on testnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.SEGWIT, _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  });
  test("valid bech32 (P2WPKH) address on testnet", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.BECH32, _unchainedBitcoin.NETWORKS.TESTNET)).toBeTruthy();
  }); // INVALID: NETWORK MISMATCH

  test("invalid legacy (P2PKH) address (wrong network)", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.LEGACY, _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.LEGACY, _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
  });
  test("invalid segwit (P2SH) address (wrong network)", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.SEGWIT, _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.SEGWIT, _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
  });
  test("invalid bech32 (P2WPKH) address (wrong network)", function () {
    expect((0, _validation.isValidAddress)(_fixtures.KEY.TEST.BECH32, _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)(_fixtures.KEY.MAIN.BECH32, _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
  }); // INVALID: BAD ADDRESS

  test("invalid addresses on mainnet", function () {
    expect((0, _validation.isValidAddress)("", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)(" ", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("1AdT...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("3JDv...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("bc1q...", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("1AdTLNfqiQtQ7yRNoZDEFTE9kSri2jrRVd", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("3JDvonJcuQ7yQQQJh1tFLV74uRZUP6LgvF", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("bc1qdX0pd4h65d7mekkhk7n6jwzfwgqath7s0e368g", _unchainedBitcoin.NETWORKS.MAINNET)).toBeFalsy();
  });
  test("invalid addresses on TESTNET", function () {
    expect((0, _validation.isValidAddress)("", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)(" ", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("1AdT...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("3JDv...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("bc1q...", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("mq9QdRkpXSKeu5tzX8Bc5NSucSTQxzpa8G", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("2N9mhsXEeWrdKcC3rN9W7xS6L7mme9kJrVe", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
    expect((0, _validation.isValidAddress)("tb1qdx0pd4h65d7mekkhk7n6Jwzfwgqath7s9l2fum", _unchainedBitcoin.NETWORKS.TESTNET)).toBeFalsy();
  });
});