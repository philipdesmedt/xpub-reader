"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAddress = validateAddress;

require("core-js/modules/es6.regexp.match");

var _bitcoinAddressValidation = _interopRequireDefault(require("bitcoin-address-validation"));

var _networks = require("./networks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This module provides validation messages related to addresses.
 * 
 * @module address
 */
var MAINNET_ADDRESS_MAGIC_BYTE_PATTERN = "^(bc1|[13])";
var TESTNET_ADDRESS_MAGIC_BYTE_PATTERN = "^(tb1|bcrt1|[mn2])";
var ADDRESS_BODY_PATTERN = "[A-HJ-NP-Za-km-z1-9]+$";
var BECH32_ADDRESS_MAGIC_BYTE_REGEX = /^(tb|bc)/;
var BECH32_ADDRESS_BODY_PATTERN = "[ac-hj-np-z02-9]+$";
/**
 * Validate a given bitcoin address.
 *
 * Address must be a valid address on the given bitcoin network.
 * 
 * @param {string} address - the address to validate
 * @param {module:networks.NETWORKS} network - bitcoin network
 * @returns {string} empty if valid or corresponding validation message if not
 * @example
 * import {MAINNET, TESTNET, validateAddress} from "unchained-bitcoin";
 * console.log(validateAddress('', MAINNET)); // "Address cannot be blank"
 * console.log(validateAddress('2Mx6Y8VRj8rmSdLfwrvnpBR7ctjctPLzpWs', MAINNET)); // "Address must start with either of 'bc1', '1' or '3' followed by letters or digits."
 * console.log(validateAddress('2Mx6Y8VRj8rmSdLfwrvnpBR7ctjctPLzpWs', TESTNET)); // ""
 * 
 */

function validateAddress(address, network) {
  if (!address || address.trim() === '') {
    return 'Address cannot be blank.';
  }

  var magic_byte_regex = network === _networks.TESTNET ? TESTNET_ADDRESS_MAGIC_BYTE_PATTERN : MAINNET_ADDRESS_MAGIC_BYTE_PATTERN;
  var isBech32 = address.match(BECH32_ADDRESS_MAGIC_BYTE_REGEX);
  var address_body_regex = isBech32 ? BECH32_ADDRESS_BODY_PATTERN : ADDRESS_BODY_PATTERN;
  var address_regex = magic_byte_regex + address_body_regex;

  if (!address.match(address_regex)) {
    if (network === _networks.TESTNET) {
      return "Address must start with one of 'tb1', 'm', 'n', or '2' followed by letters or digits.";
    } else {
      return "Address must start with either of 'bc1', '1' or '3' followed by letters or digits.";
    }
  } // try {
  //   // FIXME does this support Bech32 addresses?
  //   bitcoin.address.toOutputScript(address, network);
  // } catch (e) {
  //   return `Address is invalid: ${e}`;
  // }


  var result = (0, _bitcoinAddressValidation.default)(address);

  if (result) {
    if (network === _networks.TESTNET && !result.testnet) {
      return "This is a ".concat(_networks.MAINNET, " address.");
    }

    if (network === _networks.MAINNET && result.testnet) {
      return "This is a ".concat(_networks.TESTNET, " address.");
    }
  } else {
    return "Address is invalid.";
  }

  return '';
}