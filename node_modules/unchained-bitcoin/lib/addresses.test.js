"use strict";

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es7.object.values");

var _addresses = require("./addresses");

var _multisig = require("./multisig");

var _networks = require("./networks");

var P2PKH = "P2PKH";
var ADDRESSES = {};
ADDRESSES[_networks.NETWORKS.MAINNET] = {};
ADDRESSES[_networks.NETWORKS.MAINNET][P2PKH] = ["1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH"];
ADDRESSES[_networks.NETWORKS.MAINNET][_multisig.P2SH] = ["3LRW7jeCvQCRdPF8S3yUCfRAx4eqXFmdcr"];
ADDRESSES[_networks.NETWORKS.MAINNET][_multisig.P2WSH] = ["bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4", "bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx"];
ADDRESSES[_networks.NETWORKS.TESTNET] = {};
ADDRESSES[_networks.NETWORKS.TESTNET][P2PKH] = ["mrCDrCybB6J1vRfbwM5hemdJz73FwDBC8r"];
ADDRESSES[_networks.NETWORKS.TESTNET][_multisig.P2SH] = ["2NByiBUaEXrhmqAsg7BbLpcQSAQs1EDwt5w"];
ADDRESSES[_networks.NETWORKS.TESTNET][_multisig.P2WSH] = ["tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7"];
var ADDRESS_TYPES = [P2PKH, _multisig.P2SH, _multisig.P2WSH];
describe('addresses', function () {
  describe('validateAddress', function () {
    var invalidAddress = /must start with.+followed by letters or digits/i;
    it("returns an error message on blank addresses", function () {
      Object.values(_networks.NETWORKS).forEach(function (network) {
        expect((0, _addresses.validateAddress)("", network)).toMatch(/cannot be blank/i);
        expect((0, _addresses.validateAddress)(" ", network)).toMatch(/cannot be blank/i);
      });
    });
    it("returns an error message on an invalid address", function () {
      Object.values(_networks.NETWORKS).forEach(function (network) {
        expect((0, _addresses.validateAddress)("f", network)).toMatch(invalidAddress);
        expect((0, _addresses.validateAddress)("--", network)).toMatch(invalidAddress);
      });
    });
    it("returns an error message when an address doesn't match the network", function () {
      ADDRESS_TYPES.forEach(function (addressType) {
        ADDRESSES[_networks.NETWORKS.MAINNET][addressType].forEach(function (address) {
          expect((0, _addresses.validateAddress)(address, _networks.NETWORKS.TESTNET)).toMatch(invalidAddress);
        });

        ADDRESSES[_networks.NETWORKS.TESTNET][addressType].forEach(function (address) {
          expect((0, _addresses.validateAddress)(address, _networks.NETWORKS.MAINNET)).toMatch(invalidAddress);
        });
      });
    });
    it("returns an empty string when the address is valid", function () {
      Object.values(_networks.NETWORKS).forEach(function (network) {
        ADDRESS_TYPES.forEach(function (addressType) {
          ADDRESSES[network][addressType].forEach(function (address) {
            expect((0, _addresses.validateAddress)(address, network)).toEqual("");
          });
        });
      });
    });
  });
});