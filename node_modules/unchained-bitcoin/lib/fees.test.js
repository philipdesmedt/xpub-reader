"use strict";

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _fees = require("./fees");

var _p2sh = require("./p2sh");

var _p2sh_p2wsh = require("./p2sh_p2wsh");

var _p2wsh = require("./p2wsh");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("fees", function () {
  describe("validateFeeRate", function () {
    it("should return an error message for an unparseable fee rate", function () {
      expect((0, _fees.validateFeeRate)('foo')).toMatch(/invalid fee rate/i);
    });
    it("should return an error message for a negative fee rate", function () {
      expect((0, _fees.validateFeeRate)(-1)).toMatch(/cannot be negative/i);
    });
    it("should return an empty string for a zero fee rate", function () {
      expect((0, _fees.validateFeeRate)(0)).toBe("");
    });
    it("should return an error message when the fee rate is too high", function () {
      expect((0, _fees.validateFeeRate)(10000)).toMatch(/too high/i);
    });
    it("return an empty string for an acceptable fee rate", function () {
      expect((0, _fees.validateFeeRate)(100)).toBe("");
    });
  });
  describe("validateFee", function () {
    it("should return an error message for an unparseable fee", function () {
      expect((0, _fees.validateFee)('foo', 1000000)).toMatch(/invalid fee/i);
    });
    it("should return an error message for an unparseable total input amount", function () {
      expect((0, _fees.validateFee)(10000, 'foo')).toMatch(/invalid total input amount/i);
    });
    it("should return an error message for a negative fee", function () {
      expect((0, _fees.validateFee)(-1, 1000000)).toMatch(/cannot be negative/i);
    });
    it("should return an error message for a negative total input amount", function () {
      expect((0, _fees.validateFee)(10000, -1)).toMatch(/must be positive/i);
    });
    it("should return an error message for a zero total linput amount", function () {
      expect((0, _fees.validateFee)(10000, 0)).toMatch(/must be positive/i);
    });
    it("should return an empty string for a zero fee", function () {
      expect((0, _fees.validateFee)(0, 1000000)).toBe("");
    });
    it("should return an error message when the fee is too high", function () {
      expect((0, _fees.validateFee)(2500001, 10000000)).toMatch(/too high/i);
    });
    it("should return an error message when the fee higher than the total input amount", function () {
      expect((0, _fees.validateFee)(100001, 100000)).toMatch(/too high/i);
    });
    it("should return an empty string for an acceptable fee", function () {
      expect((0, _fees.validateFee)(10000, 1000000)).toBe("");
    });
  });
  describe("estimating multisig transaction fees and fee rates", function () {
    it("should estimate for P2SH transactions", function () {
      var params = {
        addressType: _p2sh.P2SH,
        numInputs: 2,
        numOutputs: 3,
        m: 2,
        n: 3,
        feesInSatoshis: "7180",
        feesPerByteInSatoshis: "10"
      };
      var fee = (0, _fees.estimateMultisigTransactionFee)(params);
      var feeRate = (0, _fees.estimateMultisigTransactionFeeRate)(params);
      expect(fee).toEqual((0, _bignumber.default)(params.feesInSatoshis));
      expect(feeRate).toEqual((0, _bignumber.default)(params.feesPerByteInSatoshis));
    });
    it("should estimate for P2SH-P2WSH transactions", function () {
      var params = {
        addressType: _p2sh_p2wsh.P2SH_P2WSH,
        numInputs: 2,
        numOutputs: 3,
        m: 2,
        n: 3,
        feesInSatoshis: "4090",
        feesPerByteInSatoshis: "10"
      };
      var fee = (0, _fees.estimateMultisigTransactionFee)(params);
      var feeRate = (0, _fees.estimateMultisigTransactionFeeRate)(params);
      expect(fee).toEqual((0, _bignumber.default)(params.feesInSatoshis));
      expect(feeRate).toEqual((0, _bignumber.default)(params.feesPerByteInSatoshis));
    });
    it("should estimate for P2WSH transactions", function () {
      // fee amounts from real tbtc tx
      // 0c18cb0ac72a3bd610bc3cd9c79a6fc5d3786a8d9777c26a3a264a3181862db2
      var params = {
        addressType: _p2wsh.P2WSH,
        numInputs: 3,
        numOutputs: 3,
        m: 2,
        n: 3,
        feesInSatoshis: "4550",
        feesPerByteInSatoshis: "10"
      };
      var fee = (0, _fees.estimateMultisigTransactionFee)(params);
      var feeRate = (0, _fees.estimateMultisigTransactionFeeRate)(params);
      expect(fee).toEqual((0, _bignumber.default)(params.feesInSatoshis));
      expect(feeRate).toEqual((0, _bignumber.default)(params.feesPerByteInSatoshis));
    });
  });
});