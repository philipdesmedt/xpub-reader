"use strict";

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

var _p2sh = require("./p2sh");

var _p2wsh = require("./p2wsh");

var _script = require("./script");

var _multisig = require("./multisig");

var _fixtures = require("./fixtures");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var MULTISIGS = _fixtures.TEST_FIXTURES.multisigs;
describe("multisig", function () {
  describe("generateMultisigFromPublicKeys", function () {
    MULTISIGS.forEach(function (test) {
      it("can generate an ".concat(test.network, " 2-of-2 ").concat(test.type, " address from public keys"), function () {
        var multisig = _multisig.generateMultisigFromPublicKeys.apply(void 0, [test.network, test.type, 2].concat(_toConsumableArray(test.publicKeys)));

        expect((0, _multisig.multisigAddressType)(multisig)).toEqual(test.type);
        expect((0, _multisig.multisigRequiredSigners)(multisig)).toEqual(2);
        expect((0, _multisig.multisigTotalSigners)(multisig)).toEqual(2);
        expect((0, _multisig.multisigPublicKeys)(multisig)).toEqual(test.publicKeys);
        expect((0, _script.scriptToHex)((0, _multisig.multisigScript)(multisig))).toEqual(test.type === _p2sh.P2SH ? test.redeemScriptHex : test.witnessScriptHex);
      });
    });
  });
  describe("generateMultisigFromHex", function () {
    MULTISIGS.forEach(function (test) {
      it("can generate an ".concat(test.network, " 2-of-2 ").concat(test.type, " address from public keys"), function () {
        var multisig = (0, _multisig.generateMultisigFromHex)(test.network, test.type, test.type === _p2sh.P2SH ? test.redeemScriptHex : test.witnessScriptHex);
        expect((0, _multisig.multisigAddressType)(multisig)).toEqual(test.type);
        expect((0, _multisig.multisigRequiredSigners)(multisig)).toEqual(2);
        expect((0, _multisig.multisigTotalSigners)(multisig)).toEqual(2);
        expect((0, _multisig.multisigPublicKeys)(multisig)).toEqual(test.publicKeys);
        expect((0, _script.scriptToHex)((0, _multisig.multisigScript)(multisig))).toEqual(test.multisigScriptHex);
      });
    });
  });
  describe("multisigAddressType", function () {
    MULTISIGS.forEach(function (test) {
      it("returns the address type for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _multisig.multisigAddressType)(test.multisig)).toEqual(test.type);
      });
    });
  });
  describe("multisigRequiredSigners", function () {
    MULTISIGS.forEach(function (test) {
      it("returns 2 for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _multisig.multisigRequiredSigners)(test.multisig)).toEqual(2);
      });
    });
  });
  describe("multisigTotalSigners", function () {
    MULTISIGS.forEach(function (test) {
      it("returns 2 for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _multisig.multisigTotalSigners)(test.multisig)).toEqual(2);
      });
    });
  });
  describe("multisigScript", function () {
    MULTISIGS.forEach(function (test) {
      it("returns the multisig script for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _script.scriptToHex)((0, _multisig.multisigScript)(test.multisig))).toEqual(test.multisigScriptHex);
      });
    });
  });
  describe("multisigRedeemScript", function () {
    MULTISIGS.forEach(function (test) {
      if (test.type === _p2wsh.P2WSH) {
        it("returns null for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
          expect((0, _multisig.multisigRedeemScript)(test.multisig)).toBeNull();
        });
      } else {
        it("returns the redeem script for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
          expect((0, _script.scriptToHex)((0, _multisig.multisigRedeemScript)(test.multisig))).toEqual(test.redeemScriptHex);
        });
      }
    });
  });
  describe("multisigWitnessScript", function () {
    MULTISIGS.forEach(function (test) {
      if (test.type === _p2sh.P2SH) {
        it("returns null for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
          expect((0, _multisig.multisigWitnessScript)(test.multisig)).toBeNull();
        });
      } else {
        it("returns the witness script for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
          expect((0, _script.scriptToHex)((0, _multisig.multisigWitnessScript)(test.multisig))).toEqual(test.witnessScriptHex);
        });
      }
    });
  });
  describe("multisigPublicKeys", function () {
    MULTISIGS.forEach(function (test) {
      it("returns the public keys for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _multisig.multisigPublicKeys)(test.multisig)).toEqual(test.publicKeys);
      });
    });
  });
  describe("multisigAddress", function () {
    MULTISIGS.forEach(function (test) {
      it("returns the address for a ".concat(test.network, " 2-of-2 ").concat(test.type, " address"), function () {
        expect((0, _multisig.multisigAddress)(test.multisig)).toEqual(test.address);
      });
    });
  });
});