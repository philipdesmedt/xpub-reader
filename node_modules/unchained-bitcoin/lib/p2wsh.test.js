"use strict";

var _p2wsh = require("./p2wsh");

describe("p2wsh", function () {
  describe('estimateMultisigP2WSHTransactionVSize', function () {
    it('estimates the transaction size in vbytes', function () {
      expect((0, _p2wsh.estimateMultisigP2WSHTransactionVSize)({
        numInputs: 1,
        numOutputs: 2,
        m: 2,
        n: 3
      })).toBe(202); // actual value from bitcoin core for P2PKH out
    });
    var vsize = (0, _p2wsh.estimateMultisigP2WSHTransactionVSize)({
      numInputs: 2,
      numOutputs: 2,
      m: 2,
      n: 3
    }); // from actual p2wsh payment with vsize 306
    // e6147766e23d57933968c1a5600f7e10ab91ea85ed1f033fa344519e78996846

    expect(vsize).toBeGreaterThanOrEqual(306);
    expect(vsize).toBeLessThanOrEqual(307);
  });
  xdescribe('calculateBase', function () {
    it('should correctly calculate tx base size without witness', function () {
      expect((0, _p2wsh.calculateBase)(2, 2)).toBe(178);
    });
  });
  xdescribe('getRedeemScriptSize', function () {
    it('should return the correct estimated size of a multisig script', function () {
      expect((0, _p2wsh.getRedeemScriptSize)(3)).toBe(105);
    });
  });
  xdescribe('getScriptSigSize', function () {
    it('should return the correct estimated size of a 2-of-3 multisig scriptSig', function () {
      var witnessSize = (0, _p2wsh.getWitnessSize)(2, 3); // assumes largest possible signature size of 73

      expect(witnessSize).toBe(256);
    });
  });
});