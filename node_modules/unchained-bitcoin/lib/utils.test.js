"use strict";

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("utils", function () {
  describe('validateHex', function () {
    it("returns the empty string on valid hex", function () {
      expect((0, _utils.validateHex)('deadbeef02')).toBe('');
    });
    it("returns an error message on an odd number of characters", function () {
      expect((0, _utils.validateHex)('deadbeef0')).toMatch(/invalid hex.+odd/i);
    });
    it("return an error message on invalid characters", function () {
      ['dead  beef', 'dead--beef', 'dead__beef'].forEach(function (hex) {
        expect((0, _utils.validateHex)(hex)).toMatch(/invalid hex.+only characters/i);
      });
    });
  });
  describe('toHexString', function () {
    it('converts a buffer of bytes to a hex string', function () {
      expect((0, _utils.toHexString)([0, 1, 2, 3])).toEqual('00010203');
      expect((0, _utils.toHexString)([15, 31, 47, 63])).toEqual('0f1f2f3f');
      expect((0, _utils.toHexString)([16, 32, 48, 64])).toEqual('10203040');
      expect((0, _utils.toHexString)([255, 0, 15, 16, 31, 32])).toEqual('ff000f101f20');
    });
  });
  describe('satoshisToBitcoins', function () {
    it('rounds absolute values less than one Satoshi to zero', function () {
      expect((0, _utils.satoshisToBitcoins)(0.5)).toEqual((0, _bignumber.default)(0));
      expect((0, _utils.satoshisToBitcoins)('0.5')).toEqual((0, _bignumber.default)(0));
      expect((0, _utils.satoshisToBitcoins)(-0.5)).toEqual((0, _bignumber.default)(-0));
      expect((0, _utils.satoshisToBitcoins)('-0.5')).toEqual((0, _bignumber.default)(-0));
    });
    it('can convert a single Satoshi in absolute value', function () {
      expect((0, _utils.satoshisToBitcoins)(1)).toEqual((0, _bignumber.default)('0.00000001'));
      expect((0, _utils.satoshisToBitcoins)('1')).toEqual((0, _bignumber.default)('0.00000001'));
      expect((0, _utils.satoshisToBitcoins)(-1)).toEqual((0, _bignumber.default)('-0.00000001'));
      expect((0, _utils.satoshisToBitcoins)('-1')).toEqual((0, _bignumber.default)('-0.00000001'));
    });
    it("rounds inputs down to the nearest Satoshi", function () {
      expect((0, _utils.satoshisToBitcoins)(1.5)).toEqual((0, _bignumber.default)('0.00000001'));
      expect((0, _utils.satoshisToBitcoins)('1.5')).toEqual((0, _bignumber.default)('0.00000001'));
      expect((0, _utils.satoshisToBitcoins)(-1.5)).toEqual((0, _bignumber.default)('-0.00000001'));
      expect((0, _utils.satoshisToBitcoins)('-1.5')).toEqual((0, _bignumber.default)('-0.00000001'));
      expect((0, _utils.satoshisToBitcoins)(100000000.5)).toEqual((0, _bignumber.default)('1.0'));
      expect((0, _utils.satoshisToBitcoins)('100000000.5')).toEqual((0, _bignumber.default)('1.0'));
      expect((0, _utils.satoshisToBitcoins)(-100000000.5)).toEqual((0, _bignumber.default)('-1.0'));
      expect((0, _utils.satoshisToBitcoins)('-100000000.5')).toEqual((0, _bignumber.default)('-1.0'));
      expect((0, _utils.satoshisToBitcoins)(100000001)).toEqual((0, _bignumber.default)('1.00000001'));
      expect((0, _utils.satoshisToBitcoins)('100000001')).toEqual((0, _bignumber.default)('1.00000001'));
      expect((0, _utils.satoshisToBitcoins)(-100000001)).toEqual((0, _bignumber.default)('-1.00000001'));
      expect((0, _utils.satoshisToBitcoins)('-100000001')).toEqual((0, _bignumber.default)('-1.00000001'));
    });
    it("accepts amounts larger than the theoretical maximum absolute value", function () {
      expect((0, _utils.satoshisToBitcoins)(2200000000000000)).toEqual((0, _bignumber.default)('22000000.0'));
      expect((0, _utils.satoshisToBitcoins)('2200000000000000')).toEqual((0, _bignumber.default)('22000000.0'));
      expect((0, _utils.satoshisToBitcoins)(-2200000000000000)).toEqual((0, _bignumber.default)('-22000000.0'));
      expect((0, _utils.satoshisToBitcoins)('-2200000000000000')).toEqual((0, _bignumber.default)('-22000000.0'));
    });
  });
  describe('bitcoinsToSatoshis', function () {
    it('rounds outputs less than one Satoshi to zero', function () {
      expect((0, _utils.bitcoinsToSatoshis)(0.000000001)).toEqual((0, _bignumber.default)(0));
      expect((0, _utils.bitcoinsToSatoshis)('0.000000001')).toEqual((0, _bignumber.default)(0));
      expect((0, _utils.bitcoinsToSatoshis)(-0.000000001)).toEqual((0, _bignumber.default)(-0));
      expect((0, _utils.bitcoinsToSatoshis)('-0.000000001')).toEqual((0, _bignumber.default)(-0));
    });
    it('can convert a single Satoshi in absolute value', function () {
      expect((0, _utils.bitcoinsToSatoshis)(0.00000001)).toEqual((0, _bignumber.default)(1));
      expect((0, _utils.bitcoinsToSatoshis)('0.00000001')).toEqual((0, _bignumber.default)(1));
      expect((0, _utils.bitcoinsToSatoshis)(-0.00000001)).toEqual((0, _bignumber.default)(-1));
      expect((0, _utils.bitcoinsToSatoshis)('-0.00000001')).toEqual((0, _bignumber.default)(-1));
    });
    it('rounds outputs down to the nearest Satoshi', function () {
      expect((0, _utils.bitcoinsToSatoshis)(1.000000019)).toEqual((0, _bignumber.default)('100000001'));
      expect((0, _utils.bitcoinsToSatoshis)('1.000000019')).toEqual((0, _bignumber.default)('100000001'));
      expect((0, _utils.bitcoinsToSatoshis)(-1.000000019)).toEqual((0, _bignumber.default)('-100000001'));
      expect((0, _utils.bitcoinsToSatoshis)('-1.000000019')).toEqual((0, _bignumber.default)('-100000001'));
    });
    it('accepts amounts largerr than the theoretical absolute value', function () {
      expect((0, _utils.bitcoinsToSatoshis)(22000000)).toEqual((0, _bignumber.default)('2200000000000000'));
      expect((0, _utils.bitcoinsToSatoshis)('22000000')).toEqual((0, _bignumber.default)('2200000000000000'));
      expect((0, _utils.bitcoinsToSatoshis)(-22000000)).toEqual((0, _bignumber.default)('-2200000000000000'));
      expect((0, _utils.bitcoinsToSatoshis)('-22000000')).toEqual((0, _bignumber.default)('-2200000000000000'));
    });
  });
  describe('hash160', function () {
    it('should take a buffer and hash it with sha256 and ripemd160', function () {
      var val = Buffer.from('a2bc6de234a4b2fe10fe582f29c39de52b8161624ef310ca6cccff5d6d7d591a', 'hex');
      var expected = Buffer.from('d06d0dadca1f9cf3aedd5514e0669c2fffa7bc81', 'hex');
      expect((0, _utils.hash160)(val)).toEqual(expected);
    });
  });
});